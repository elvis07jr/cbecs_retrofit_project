# config.py

import os

# Data Paths
# Ensure this path is correct relative to where you run your pipeline.py
CBECS_DATA_FILE = 'cbecs2018_final_public.csv'
MODEL_OUTPUT_PATH = 'heating_retrofit_model.pkl'

# Default filtering parameters for the pipeline
# Set to None or empty list to include all for broader analysis
DEFAULT_TARGET_REGION = None # Set to None to include all regions initially
DEFAULT_TARGET_BUILDING_TYPES = [] # Set to [] to include all building types initially
# Example of more specific filters:
# DEFAULT_TARGET_REGION = 'Northeast'
# DEFAULT_TARGET_BUILDING_TYPES = ['OFFICE', 'RETAIL_ENCLOSED_MALL', 'RETAIL_STRIP_SHOPPING_CENTER']
# Note: Building types should be uppercase and use underscores if they contain spaces,
# as per the robust column cleaning applied during data loading.


# Economic Analysis Constants
ENERGY_COSTS = {
    'Natural Gas': 0.012,   # $/therm (approx $12/MMBtu)
    'Electricity': 0.10,    # $/kWh
    'Fuel Oil': 0.025,      # $/gallon equivalent
    'Propane': 0.030,       # $/gallon equivalent
    'District Heat': 0.015  # $/therm equivalent
}

# Retrofit Cost Estimates ($/sq ft)
RETROFIT_COSTS = {
    'HVAC_Upgrade': {'low': 8, 'medium': 15, 'high': 25},
    'Insulation': {'low': 3, 'medium': 6, 'high': 12},
    'Windows': {'low': 15, 'medium': 25, 'high': 40},
    'Smart_Controls': {'low': 2, 'medium': 4, 'high': 8},
    'Comprehensive': {'low': 20, 'medium': 35, 'high': 60}
}

# Default Economic Parameters for ROI calculations
ECONOMIC_PARAMS = {
    'discount_rate': 0.06,
    'analysis_period': 15,
    'energy_cost_escalation': 0.03,
    'maintenance_cost_factor': 0.02
}

# Regional climate mappings
# Ensure these match the values in your 'PUBCLIM' column from the dataset
# Values here should be the *cleaned* and *uppercased* values from your data.
REGION_CLIMATE_ZONES = {
    'NORTHEAST': ['COLD', 'VERY_COLD'], # Example of uppercase climate zones
    'SOUTHEAST': ['HOT_HUMID', 'MIXED_HUMID'],
    'MIDWEST': ['COLD', 'VERY_COLD'],
    'SOUTHWEST': ['HOT_DRY', 'MIXED_DRY'],
    'WEST': ['MARINE', 'COLD', 'HOT_DRY']
}

# Feature columns used for modeling
# Ensure these names exactly match the cleaned, uppercase column names after DataProcessor.load_data
MODELING_FEATURE_COLUMNS = [
    # Building characteristics
    'PBA', 'SQFT', 'YRCONC', 'NFLOOR', 'BUILDING_AGE',
    # Building envelope
    'WLCNS', 'RFCNS', 'TYPEGLASS', 'WINFRAME', 'ADQINSUL', 'DRAFTY',
    # Systems
    'EQUIPM', 'FUELHEAT', 'AIRCOND',
    # Climate
    'PUBCLIM', 'HDD65', 'CDD65',
    # Operations
    'WKHRS', 'OPEN24', 'OCCUPYP',
    # Renovation
    'RENOV',
    # Calculated features (ensure these are generated by feature_processing)
    'HEATING_INTENSITY_SQFT', 'HEATING_INTENSITY_HDD', 'EFFICIENCY_SCORE',
    'SIZE_CATEGORY', 'AGE_CATEGORY'
]

# Hyperparameter grids for tuning
HYPERPARAMETER_GRIDS = {
    'Random Forest': {
        'n_estimators': [100, 200, 300],
        'max_depth': [10, 20, None],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4]
    },
    'XGBoost': {
        'n_estimators': [100, 200, 300],
        'max_depth': [3, 6, 10],
        'learning_rate': [0.01, 0.1, 0.2],
        'subsample': [0.8, 0.9, 1.0]
    }
}
